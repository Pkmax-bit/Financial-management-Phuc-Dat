'use client'

import React, { useState } from 'react'
import { X, ArrowRight, ArrowLeft, CheckCircle, Receipt, FileText, Building2, ShoppingCart, User, BarChart3, PieChart } from 'lucide-react'

interface QuickGuideModalProps {
  isOpen: boolean
  onClose: () => void
}

const steps = [
  {
    id: 1,
    title: "Thi·∫øt l·∫≠p Nh√† cung c·∫•p",
    description: "Th√™m th√¥ng tin c√°c nh√† cung c·∫•p m√† doanh nghi·ªáp th∆∞·ªùng xuy√™n l√†m vi·ªác",
    icon: Building2,
    color: "purple",
    details: [
      "V√†o tab 'Nh√† cung c·∫•p'",
      "Nh·∫•n 'T·∫°o nh√† cung c·∫•p'",
      "ƒêi·ªÅn th√¥ng tin li√™n h·ªá v√† t√†i ch√≠nh",
      "L∆∞u th√¥ng tin nh√† cung c·∫•p"
    ]
  },
  {
    id: 2,
    title: "T·∫°o Ng√¢n s√°ch",
    description: "Thi·∫øt l·∫≠p ng√¢n s√°ch cho c√°c danh m·ª•c chi ph√≠ ch√≠nh",
    icon: BarChart3,
    color: "green",
    details: [
      "V√†o tab 'Qu·∫£n l√Ω ng√¢n s√°ch'",
      "Nh·∫•n 'T·∫°o ng√¢n s√°ch'",
      "Ch·ªçn chu k·ª≥ (th√°ng/qu√Ω/nƒÉm)",
      "Thi·∫øt l·∫≠p c√°c d√≤ng ng√¢n s√°ch",
      "G·ª≠i ph√™ duy·ªát"
    ]
  },
  {
    id: 3,
    title: "Ghi nh·∫≠n Chi ph√≠",
    description: "B·∫Øt ƒë·∫ßu ghi nh·∫≠n c√°c kho·∫£n chi ph√≠ ph√°t sinh",
    icon: Receipt,
    color: "orange",
    details: [
      "V√†o tab 'Chi ph√≠'",
      "Nh·∫•n 'T·∫°o chi ph√≠'",
      "ƒêi·ªÅn th√¥ng tin chi ph√≠",
      "ƒê√≠nh k√®m ch·ª©ng t·ª´",
      "Ch·ªçn ng∆∞·ªùi ph√™ duy·ªát"
    ]
  },
  {
    id: 4,
    title: "Qu·∫£n l√Ω H√≥a ƒë∆°n NCC",
    description: "X·ª≠ l√Ω h√≥a ƒë∆°n t·ª´ nh√† cung c·∫•p v√† theo d√µi thanh to√°n",
    icon: FileText,
    color: "red",
    details: [
      "V√†o tab 'H√≥a ƒë∆°n NCC'",
      "Nh·∫•n 'T·∫°o h√≥a ƒë∆°n NCC'",
      "Nh·∫≠p th√¥ng tin h√≥a ƒë∆°n",
      "Ph√™ duy·ªát h√≥a ƒë∆°n",
      "Th·ª±c hi·ªán thanh to√°n"
    ]
  },
  {
    id: 5,
    title: "ƒê∆°n ƒë·∫∑t h√†ng",
    description: "T·∫°o ƒë∆°n ƒë·∫∑t h√†ng ƒë·ªÉ ki·ªÉm so√°t chi ti√™u tr∆∞·ªõc khi mua",
    icon: ShoppingCart,
    color: "blue",
    details: [
      "V√†o tab 'ƒê∆°n ƒë·∫∑t h√†ng'",
      "Nh·∫•n 'T·∫°o ƒë∆°n ƒë·∫∑t h√†ng'",
      "Ch·ªçn nh√† cung c·∫•p",
      "Th√™m c√°c m·∫∑t h√†ng c·∫ßn mua",
      "G·ª≠i ph√™ duy·ªát"
    ]
  },
  {
    id: 6,
    title: "ƒê·ªÅ ngh·ªã Ho√†n ·ª©ng",
    description: "Qu·∫£n l√Ω ƒë·ªÅ ngh·ªã ho√†n ·ª©ng c·ªßa nh√¢n vi√™n",
    icon: User,
    color: "purple",
    details: [
      "V√†o tab 'ƒê·ªÅ ngh·ªã ho√†n ·ª©ng'",
      "Nh·∫•n 'T·∫°o ƒë·ªÅ ngh·ªã ho√†n ·ª©ng'",
      "Th√™m c√°c chi ph√≠ ƒë√£ chi",
      "ƒê√≠nh k√®m h√≥a ƒë∆°n/ch·ª©ng t·ª´",
      "G·ª≠i ph√™ duy·ªát"
    ]
  },
  {
    id: 7,
    title: "Theo d√µi & B√°o c√°o",
    description: "S·ª≠ d·ª•ng c√°c b√°o c√°o ƒë·ªÉ theo d√µi hi·ªáu qu·∫£",
    icon: PieChart,
    color: "indigo",
    details: [
      "Xem b√°o c√°o ng√¢n s√°ch vs th·ª±c t·∫ø",
      "Ph√¢n t√≠ch chi ph√≠ theo danh m·ª•c",
      "Theo d√µi xu h∆∞·ªõng chi ph√≠",
      "ƒêi·ªÅu ch·ªânh ng√¢n s√°ch khi c·∫ßn"
    ]
  },
  {
    id: 8,
    title: "Ho√†n th√†nh",
    description: "B·∫°n ƒë√£ ho√†n th√†nh h∆∞·ªõng d·∫´n c∆° b·∫£n!",
    icon: CheckCircle,
    color: "green",
    details: [
      "H·ªá th·ªëng ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng",
      "B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω chi ph√≠",
      "Tham kh·∫£o h∆∞·ªõng d·∫´n chi ti·∫øt khi c·∫ßn",
      "Li√™n h·ªá h·ªó tr·ª£ n·∫øu c√≥ v·∫•n ƒë·ªÅ"
    ]
  }
]

export default function QuickGuideModal({ isOpen, onClose }: QuickGuideModalProps) {
  const [currentStep, setCurrentStep] = useState(0)
  const [completedSteps, setCompletedSteps] = useState<number[]>([])

  const currentStepData = steps[currentStep]
  const progress = ((currentStep + 1) / steps.length) * 100

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1)
    }
  }

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleComplete = () => {
    setCompletedSteps([...completedSteps, currentStep])
    if (currentStep < steps.length - 1) {
      handleNext()
    }
  }

  const handleClose = () => {
    setCurrentStep(0)
    setCompletedSteps([])
    onClose()
  }

  const getColorClasses = (color: string) => {
    const colors = {
      purple: 'bg-purple-100 text-purple-600',
      green: 'bg-green-100 text-green-600',
      orange: 'bg-orange-100 text-orange-600',
      red: 'bg-red-100 text-red-600',
      blue: 'bg-blue-100 text-blue-600',
      indigo: 'bg-indigo-100 text-indigo-600'
    }
    return colors[color as keyof typeof colors] || 'bg-gray-100 text-gray-600'
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b">
          <div>
            <h2 className="text-xl font-semibold text-gray-900">
              H∆∞·ªõng d·∫´n Nhanh - Qu·∫£n l√Ω Chi ph√≠
            </h2>
            <p className="text-sm text-gray-600 mt-1">
              B∆∞·ªõc {currentStep + 1} / {steps.length}
            </p>
          </div>
          <button
            onClick={handleClose}
            className="text-gray-400 hover:text-gray-600"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        {/* Progress Bar */}
        <div className="px-6 py-3 bg-gray-50">
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${progress}%` }}
            ></div>
          </div>
        </div>

        {/* Content */}
        <div className="p-6">
          <div className="text-center mb-6">
            <div className={`inline-flex items-center justify-center w-16 h-16 rounded-full mb-4 ${getColorClasses(currentStepData.color)}`}>
              <currentStepData.icon className="h-8 w-8" />
            </div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              {currentStepData.title}
            </h3>
            <p className="text-gray-600">
              {currentStepData.description}
            </p>
          </div>

          {/* Step Details */}
          <div className="bg-gray-50 rounded-lg p-4 mb-6">
            <h4 className="font-semibold text-gray-900 mb-3">C√°c b∆∞·ªõc th·ª±c hi·ªán:</h4>
            <ol className="space-y-2">
              {currentStepData.details.map((detail, index) => (
                <li key={index} className="flex items-start space-x-2">
                  <span className="flex-shrink-0 w-5 h-5 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-semibold mt-0.5">
                    {index + 1}
                  </span>
                  <span className="text-sm text-gray-700">{detail}</span>
                </li>
              ))}
            </ol>
          </div>

          {/* Tips */}
          {currentStep < steps.length - 1 && (
            <div className="bg-blue-50 border-l-4 border-blue-400 p-4 mb-6">
              <div className="flex">
                <div className="flex-shrink-0">
                  <div className="w-5 h-5 bg-blue-100 rounded-full flex items-center justify-center">
                    <span className="text-xs font-semibold text-blue-600">üí°</span>
                  </div>
                </div>
                <div className="ml-3">
                  <p className="text-sm text-blue-800">
                    <strong>M·∫πo:</strong> {getStepTip(currentStep)}
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Completion Message */}
          {currentStep === steps.length - 1 && (
            <div className="bg-green-50 border-l-4 border-green-400 p-4 mb-6">
              <div className="flex">
                <CheckCircle className="h-5 w-5 text-green-400 mt-0.5 mr-3" />
                <div>
                  <p className="text-sm text-green-800">
                    <strong>Ch√∫c m·ª´ng!</strong> B·∫°n ƒë√£ ho√†n th√†nh h∆∞·ªõng d·∫´n c∆° b·∫£n. H·ªá th·ªëng ƒë√£ s·∫µn s√†ng ƒë·ªÉ b·∫°n b·∫Øt ƒë·∫ßu qu·∫£n l√Ω chi ph√≠ hi·ªáu qu·∫£.
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between p-6 border-t bg-gray-50">
          <button
            onClick={handlePrevious}
            disabled={currentStep === 0}
            className="flex items-center px-4 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Tr∆∞·ªõc
          </button>

          <div className="flex items-center space-x-2">
            {currentStep < steps.length - 1 ? (
              <button
                onClick={handleComplete}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
              >
                Ho√†n th√†nh
                <CheckCircle className="h-4 w-4 ml-2" />
              </button>
            ) : (
              <button
                onClick={handleClose}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"
              >
                ƒê√≥ng
              </button>
            )}

            {currentStep < steps.length - 1 && (
              <button
                onClick={handleNext}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
              >
                Ti·∫øp theo
                <ArrowRight className="h-4 w-4 ml-2" />
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

function getStepTip(step: number): string {
  const tips = [
    "Th√¥ng tin nh√† cung c·∫•p c√†ng chi ti·∫øt c√†ng t·ªët ƒë·ªÉ d·ªÖ d√†ng qu·∫£n l√Ω sau n√†y.",
    "Thi·∫øt l·∫≠p ng√¢n s√°ch th·ª±c t·∫ø d·ª±a tr√™n kinh nghi·ªám v√† k·∫ø ho·∫°ch kinh doanh.",
    "Ghi nh·∫≠n chi ph√≠ ngay khi ph√°t sinh ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ch√≠nh x√°c.",
    "Ki·ªÉm tra k·ªπ th√¥ng tin h√≥a ƒë∆°n tr∆∞·ªõc khi ph√™ duy·ªát ƒë·ªÉ tr√°nh sai s√≥t.",
    "S·ª≠ d·ª•ng ƒë∆°n ƒë·∫∑t h√†ng ƒë·ªÉ ki·ªÉm so√°t chi ti√™u tr∆∞·ªõc khi th·ª±c hi·ªán mua h√†ng.",
    "ƒê√≠nh k√®m ƒë·∫ßy ƒë·ªß ch·ª©ng t·ª´ ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh minh b·∫°ch trong ƒë·ªÅ ngh·ªã ho√†n ·ª©ng.",
    "Th∆∞·ªùng xuy√™n xem b√°o c√°o ƒë·ªÉ ph√°t hi·ªán xu h∆∞·ªõng v√† ƒëi·ªÅu ch·ªânh k·ªãp th·ªùi.",
    "H·ªá th·ªëng ƒë√£ s·∫µn s√†ng! B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng ngay b√¢y gi·ªù."
  ]
  return tips[step] || ""
}

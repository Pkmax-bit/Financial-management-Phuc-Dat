-- =====================================================
-- H·ªÜ TH·ªêNG C·∫¢M X√öC V√Ä B√åNH LU·∫¨N V·ªöI C·∫§U TR√öC NH√ÅNH CHA CON
-- =====================================================

-- B·∫£ng l∆∞u tr·ªØ c√°c lo·∫°i c·∫£m x√∫c/ph·∫£n ·ª©ng
CREATE TABLE IF NOT EXISTS emotion_types (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    display_name VARCHAR(100) NOT NULL,
    emoji VARCHAR(10) NOT NULL,
    color VARCHAR(7), -- Hex color code
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- B·∫£ng b√¨nh lu·∫≠n v·ªõi c·∫•u tr√∫c nh√°nh cha con
CREATE TABLE IF NOT EXISTS comments (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    parent_id UUID REFERENCES comments(id) ON DELETE CASCADE, -- NULL cho b√¨nh lu·∫≠n g·ªëc
    entity_type VARCHAR(50) NOT NULL, -- 'project', 'timeline_entry', 'invoice', 'expense', etc.
    entity_id UUID NOT NULL, -- ID c·ªßa entity ƒë∆∞·ª£c b√¨nh lu·∫≠n
    timeline_id UUID REFERENCES project_timeline(id) ON DELETE CASCADE, -- ID c·ªßa timeline entry
    user_id UUID REFERENCES users(id) ON DELETE SET NULL,
    author_name VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    is_edited BOOLEAN DEFAULT false,
    is_deleted BOOLEAN DEFAULT false,
    deleted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- B·∫£ng l∆∞u tr·ªØ c·∫£m x√∫c/ph·∫£n ·ª©ng c·ªßa ng∆∞·ªùi d√πng
CREATE TABLE IF NOT EXISTS user_reactions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    entity_type VARCHAR(50) NOT NULL, -- 'comment', 'timeline_entry', 'project', etc.
    entity_id UUID NOT NULL, -- ID c·ªßa entity ƒë∆∞·ª£c ph·∫£n ·ª©ng
    emotion_type_id UUID REFERENCES emotion_types(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, entity_type, entity_id, emotion_type_id) -- M·ªôt user ch·ªâ c√≥ th·ªÉ c√≥ m·ªôt lo·∫°i c·∫£m x√∫c tr√™n m·ªôt entity
);

-- B·∫£ng l∆∞u tr·ªØ th√¥ng b√°o v·ªÅ b√¨nh lu·∫≠n v√† ph·∫£n ·ª©ng
CREATE TABLE IF NOT EXISTS comment_notifications (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    comment_id UUID REFERENCES comments(id) ON DELETE CASCADE,
    notification_type VARCHAR(50) NOT NULL, -- 'new_comment', 'reply', 'reaction', 'mention'
    is_read BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- B·∫£ng l∆∞u tr·ªØ mentions trong b√¨nh lu·∫≠n
CREATE TABLE IF NOT EXISTS comment_mentions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    comment_id UUID REFERENCES comments(id) ON DELETE CASCADE,
    mentioned_user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- INDEXES CHO HI·ªÜU SU·∫§T
-- =====================================================

-- Indexes cho b·∫£ng comments
CREATE INDEX IF NOT EXISTS idx_comments_parent_id ON comments(parent_id);
CREATE INDEX IF NOT EXISTS idx_comments_entity ON comments(entity_type, entity_id);
CREATE INDEX IF NOT EXISTS idx_comments_timeline_id ON comments(timeline_id);
CREATE INDEX IF NOT EXISTS idx_comments_user_id ON comments(user_id);
CREATE INDEX IF NOT EXISTS idx_comments_created_at ON comments(created_at);
CREATE INDEX IF NOT EXISTS idx_comments_is_deleted ON comments(is_deleted);

-- Indexes cho b·∫£ng user_reactions
CREATE INDEX IF NOT EXISTS idx_user_reactions_user_id ON user_reactions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_reactions_entity ON user_reactions(entity_type, entity_id);
CREATE INDEX IF NOT EXISTS idx_user_reactions_emotion_type ON user_reactions(emotion_type_id);
CREATE INDEX IF NOT EXISTS idx_user_reactions_created_at ON user_reactions(created_at);

-- Indexes cho b·∫£ng comment_notifications
CREATE INDEX IF NOT EXISTS idx_comment_notifications_user_id ON comment_notifications(user_id);
CREATE INDEX IF NOT EXISTS idx_comment_notifications_comment_id ON comment_notifications(comment_id);
CREATE INDEX IF NOT EXISTS idx_comment_notifications_is_read ON comment_notifications(is_read);
CREATE INDEX IF NOT EXISTS idx_comment_notifications_created_at ON comment_notifications(created_at);

-- Indexes cho b·∫£ng comment_mentions
CREATE INDEX IF NOT EXISTS idx_comment_mentions_comment_id ON comment_mentions(comment_id);
CREATE INDEX IF NOT EXISTS idx_comment_mentions_user_id ON comment_mentions(mentioned_user_id);

-- =====================================================
-- TRIGGERS V√Ä FUNCTIONS
-- =====================================================

-- Function ƒë·ªÉ c·∫≠p nh·∫≠t updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers cho updated_at
CREATE TRIGGER update_emotion_types_updated_at 
    BEFORE UPDATE ON emotion_types 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_comments_updated_at 
    BEFORE UPDATE ON comments 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function ƒë·ªÉ t·∫°o th√¥ng b√°o khi c√≥ b√¨nh lu·∫≠n m·ªõi
CREATE OR REPLACE FUNCTION create_comment_notification()
RETURNS TRIGGER AS $$
BEGIN
    -- T·∫°o th√¥ng b√°o cho t√°c gi·∫£ c·ªßa b√¨nh lu·∫≠n cha (n·∫øu c√≥)
    IF NEW.parent_id IS NOT NULL THEN
        INSERT INTO comment_notifications (user_id, comment_id, notification_type)
        SELECT c.user_id, NEW.id, 'reply'
        FROM comments c
        WHERE c.id = NEW.parent_id AND c.user_id != NEW.user_id;
    END IF;
    
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger ƒë·ªÉ t·∫°o th√¥ng b√°o
CREATE TRIGGER trigger_create_comment_notification
    AFTER INSERT ON comments
    FOR EACH ROW EXECUTE FUNCTION create_comment_notification();

-- =====================================================
-- D·ªÆ LI·ªÜU M·∫™U CHO C·∫¢M X√öC
-- =====================================================

-- Th√™m c√°c lo·∫°i c·∫£m x√∫c m·∫∑c ƒë·ªãnh
INSERT INTO emotion_types (name, display_name, emoji, color) VALUES
('like', 'Th√≠ch', 'üëç', '#4CAF50'),
('love', 'Y√™u th√≠ch', '‚ù§Ô∏è', '#F44336'),
('laugh', 'C∆∞·ªùi', 'üòÇ', '#FF9800'),
('wow', 'Wow', 'üòÆ', '#9C27B0'),
('sad', 'Bu·ªìn', 'üò¢', '#2196F3'),
('angry', 'T·ª©c gi·∫≠n', 'üò†', '#F44336'),
('dislike', 'Kh√¥ng th√≠ch', 'üëé', '#757575'),
('celebrate', 'Ch√∫c m·ª´ng', 'üéâ', '#FF5722')
ON CONFLICT (name) DO NOTHING;

-- =====================================================
-- COMMENTS V√Ä DOCUMENTATION
-- =====================================================

COMMENT ON TABLE emotion_types IS 'B·∫£ng l∆∞u tr·ªØ c√°c lo·∫°i c·∫£m x√∫c/ph·∫£n ·ª©ng c√≥ th·ªÉ s·ª≠ d·ª•ng';
COMMENT ON TABLE comments IS 'B·∫£ng b√¨nh lu·∫≠n v·ªõi c·∫•u tr√∫c nh√°nh cha con, h·ªó tr·ª£ reply v√† nested comments';
COMMENT ON TABLE user_reactions IS 'B·∫£ng l∆∞u tr·ªØ ph·∫£n ·ª©ng/c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng tr√™n c√°c entity';
COMMENT ON TABLE comment_notifications IS 'B·∫£ng th√¥ng b√°o v·ªÅ b√¨nh lu·∫≠n v√† ph·∫£n ·ª©ng';
COMMENT ON TABLE comment_mentions IS 'B·∫£ng l∆∞u tr·ªØ mentions trong b√¨nh lu·∫≠n';

COMMENT ON COLUMN comments.parent_id IS 'ID c·ªßa b√¨nh lu·∫≠n cha, NULL n·∫øu l√† b√¨nh lu·∫≠n g·ªëc';
COMMENT ON COLUMN comments.entity_type IS 'Lo·∫°i entity ƒë∆∞·ª£c b√¨nh lu·∫≠n (project, timeline_entry, invoice, etc.)';
COMMENT ON COLUMN comments.entity_id IS 'ID c·ªßa entity ƒë∆∞·ª£c b√¨nh lu·∫≠n';
COMMENT ON COLUMN comments.timeline_id IS 'ID c·ªßa timeline entry m√† b√¨nh lu·∫≠n thu·ªôc v·ªÅ';
COMMENT ON COLUMN comments.is_edited IS 'ƒê√°nh d·∫•u b√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a';
COMMENT ON COLUMN comments.is_deleted IS 'ƒê√°nh d·∫•u b√¨nh lu·∫≠n ƒë√£ b·ªã x√≥a (soft delete)';

COMMENT ON COLUMN user_reactions.entity_type IS 'Lo·∫°i entity ƒë∆∞·ª£c ph·∫£n ·ª©ng (comment, timeline_entry, project, etc.)';
COMMENT ON COLUMN user_reactions.entity_id IS 'ID c·ªßa entity ƒë∆∞·ª£c ph·∫£n ·ª©ng';

"""
Script test t·∫°o nh√¢n vi√™n
Ki·ªÉm tra ch·ª©c nƒÉng t·∫°o nh√¢n vi√™n v·ªõi c√°c tr∆∞·ªùng h·ª£p kh√°c nhau
"""

import requests
import json

API_BASE_URL = "http://localhost:8000"

def test_employee_creation():
    """Test t·∫°o nh√¢n vi√™n"""
    print("Test tao nhan vien...")
    
    try:
        # Login ƒë·ªÉ l·∫•y token
        login_response = requests.post(f"{API_BASE_URL}/api/auth/login", json={
            "email": "admin@test.com",
            "password": "123456"
        })
        
        if login_response.status_code != 200:
            print("‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p")
            return False
        
        token = login_response.json().get("access_token")
        headers = {"Authorization": f"Bearer {token}"}
        
        # Test data cho nh√¢n vi√™n m·ªõi
        test_cases = [
            {
                "name": "T·∫°o nh√¢n vi√™n m·ªõi",
                "data": {
                    "first_name": "Test",
                    "last_name": "Employee",
                    "email": "test.employee.new@company.com",
                    "phone": "0901000099",
                    "department_id": "dept-004",  # C√¥ng ngh·ªá
                    "position_id": "pos-008",    # L·∫≠p tr√¨nh vi√™n
                    "hire_date": "2024-01-01",
                    "salary": 20000000,
                    "user_role": "employee"
                }
            },
            {
                "name": "T·∫°o nh√¢n vi√™n v·ªõi email ƒë√£ t·ªìn t·∫°i",
                "data": {
                    "first_name": "Test",
                    "last_name": "Employee",
                    "email": "admin@test.com",  # Email ƒë√£ t·ªìn t·∫°i
                    "phone": "0901000098",
                    "department_id": "dept-001",
                    "position_id": "pos-001",
                    "hire_date": "2024-01-01",
                    "salary": 30000000,
                    "user_role": "admin"
                }
            },
            {
                "name": "T·∫°o nh√¢n vi√™n v·ªõi role kh√°c",
                "data": {
                    "first_name": "Test",
                    "last_name": "Sales",
                    "email": "test.sales.new@company.com",
                    "phone": "0901000097",
                    "department_id": "dept-003",  # Kinh doanh
                    "position_id": "pos-006",    # Nh√¢n vi√™n kinh doanh
                    "hire_date": "2024-01-01",
                    "salary": 15000000,
                    "user_role": "sales"
                }
            }
        ]
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüìù Test {i}: {test_case['name']}")
            
            try:
                response = requests.post(f"{API_BASE_URL}/api/employees/", 
                                       headers=headers, 
                                       json=test_case['data'])
                
                if response.status_code == 200:
                    employee = response.json()
                    print(f"Thanh cong")
                    print(f"   - Employee Code: {employee.get('employee_code')}")
                    print(f"   - Email: {employee.get('email')}")
                    print(f"   - Role: {employee.get('user_role')}")
                    print(f"   - Department: {employee.get('department', {}).get('name', 'N/A')}")
                    print(f"   - Position: {employee.get('position', {}).get('name', 'N/A')}")
                else:
                    print(f"That bai: {response.status_code}")
                    try:
                        error_data = response.json()
                        print(f"   - Error: {error_data.get('detail', 'Unknown error')}")
                    except:
                        print(f"   - Response: {response.text}")
                        
            except Exception as e:
                print(f"‚ùå L·ªói: {str(e)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test t·∫°o nh√¢n vi√™n: {str(e)}")
        return False

def test_employee_validation():
    """Test validation khi t·∫°o nh√¢n vi√™n"""
    print("\nüîç Test validation t·∫°o nh√¢n vi√™n...")
    
    try:
        # Login
        login_response = requests.post(f"{API_BASE_URL}/api/auth/login", json={
            "email": "admin@test.com",
            "password": "123456"
        })
        
        if login_response.status_code != 200:
            print("‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p")
            return False
        
        token = login_response.json().get("access_token")
        headers = {"Authorization": f"Bearer {token}"}
        
        # Test cases v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        invalid_cases = [
            {
                "name": "Thi·∫øu first_name",
                "data": {
                    "last_name": "Test",
                    "email": "test@company.com",
                    "hire_date": "2024-01-01",
                    "user_role": "employee"
                }
            },
            {
                "name": "Email kh√¥ng h·ª£p l·ªá",
                "data": {
                    "first_name": "Test",
                    "last_name": "Test",
                    "email": "invalid-email",
                    "hire_date": "2024-01-01",
                    "user_role": "employee"
                }
            },
            {
                "name": "Role kh√¥ng h·ª£p l·ªá",
                "data": {
                    "first_name": "Test",
                    "last_name": "Test",
                    "email": "test@company.com",
                    "hire_date": "2024-01-01",
                    "user_role": "invalid_role"
                }
            }
        ]
        
        for i, test_case in enumerate(invalid_cases, 1):
            print(f"\nüìù Test validation {i}: {test_case['name']}")
            
            try:
                response = requests.post(f"{API_BASE_URL}/api/employees/", 
                                       headers=headers, 
                                       json=test_case['data'])
                
                if response.status_code == 422:  # Validation error
                    print(f"‚úÖ Validation ho·∫°t ƒë·ªông ƒë√∫ng")
                    try:
                        error_data = response.json()
                        print(f"   - Validation errors: {error_data.get('detail', 'Unknown')}")
                    except:
                        print(f"   - Response: {response.text}")
                else:
                    print(f"‚ùå Validation kh√¥ng ho·∫°t ƒë·ªông: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå L·ªói: {str(e)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test validation: {str(e)}")
        return False

def test_employee_list():
    """Test l·∫•y danh s√°ch nh√¢n vi√™n"""
    print("\nüîç Test l·∫•y danh s√°ch nh√¢n vi√™n...")
    
    try:
        # Login
        login_response = requests.post(f"{API_BASE_URL}/api/auth/login", json={
            "email": "admin@test.com",
            "password": "123456"
        })
        
        if login_response.status_code != 200:
            print("‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p")
            return False
        
        token = login_response.json().get("access_token")
        headers = {"Authorization": f"Bearer {token}"}
        
        # Test GET employees
        response = requests.get(f"{API_BASE_URL}/api/employees/", headers=headers)
        
        if response.status_code == 200:
            employees = response.json()
            print(f"‚úÖ L·∫•y danh s√°ch nh√¢n vi√™n th√†nh c√¥ng")
            print(f"   - S·ªë l∆∞·ª£ng: {len(employees)}")
            
            if employees:
                employee = employees[0]
                print(f"   - Employee ƒë·∫ßu ti√™n:")
                print(f"     + Code: {employee.get('employee_code')}")
                print(f"     + Name: {employee.get('first_name')} {employee.get('last_name')}")
                print(f"     + Email: {employee.get('email')}")
                print(f"     + Role: {employee.get('user_role')}")
        else:
            print(f"‚ùå L·ªói l·∫•y danh s√°ch: {response.status_code}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test danh s√°ch nh√¢n vi√™n: {str(e)}")
        return False

def run_employee_tests():
    """Ch·∫°y t·∫•t c·∫£ test nh√¢n vi√™n"""
    print("KIEM TRA CHUC NANG NHAN VIEN")
    print("=" * 50)
    
    # Test t·∫°o nh√¢n vi√™n
    test_employee_creation()
    
    # Test validation
    test_employee_validation()
    
    # Test l·∫•y danh s√°ch
    test_employee_list()
    
    print("\n" + "=" * 50)
    print("HOAN THANH KIEM TRA CHUC NANG NHAN VIEN")
    print("=" * 50)

if __name__ == "__main__":
    run_employee_tests()

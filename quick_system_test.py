"""
Script ki·ªÉm tra nhanh h·ªá th·ªëng
Test c√°c ch·ª©c nƒÉng c∆° b·∫£n nh·∫•t
"""

import requests
import time

API_BASE_URL = "http://localhost:8000"

def quick_test():
    """Test nhanh c√°c ch·ª©c nƒÉng c∆° b·∫£n"""
    print("üöÄ KI·ªÇM TRA NHANH H·ªÜ TH·ªêNG")
    print("=" * 50)
    
    # 1. Test server c√≥ ch·∫°y kh√¥ng
    print("üîç 1. Ki·ªÉm tra server...")
    try:
        response = requests.get(f"{API_BASE_URL}/docs", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Server ƒëang ch·∫°y")
        else:
            print(f"‚ùå Server l·ªói: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi server: {str(e)}")
        return False
    
    # 2. Test login
    print("\nüîç 2. Ki·ªÉm tra login...")
    try:
        response = requests.post(f"{API_BASE_URL}/api/auth/login", json={
            "email": "admin@test.com",
            "password": "123456"
        }, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Login th√†nh c√¥ng")
            token = response.json().get("access_token")
        else:
            print(f"‚ùå Login th·∫•t b·∫°i: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói login: {str(e)}")
        return False
    
    # 3. Test employees endpoint
    print("\nüîç 3. Ki·ªÉm tra employees endpoint...")
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{API_BASE_URL}/api/employees/", headers=headers, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Employees endpoint OK - {len(data)} employees")
        else:
            print(f"‚ùå Employees endpoint l·ªói: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói employees endpoint: {str(e)}")
        return False
    
    # 4. Test departments endpoint
    print("\nüîç 4. Ki·ªÉm tra departments endpoint...")
    try:
        response = requests.get(f"{API_BASE_URL}/api/employees/departments", headers=headers, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Departments endpoint OK - {len(data)} departments")
        else:
            print(f"‚ùå Departments endpoint l·ªói: {response.status_code}")
    except Exception as e:
        print(f"‚ùå L·ªói departments endpoint: {str(e)}")
    
    # 5. Test positions endpoint
    print("\nüîç 5. Ki·ªÉm tra positions endpoint...")
    try:
        response = requests.get(f"{API_BASE_URL}/api/employees/positions", headers=headers, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Positions endpoint OK - {len(data)} positions")
        else:
            print(f"‚ùå Positions endpoint l·ªói: {response.status_code}")
    except Exception as e:
        print(f"‚ùå L·ªói positions endpoint: {str(e)}")
    
    # 6. Test dashboard endpoint
    print("\nüîç 6. Ki·ªÉm tra dashboard endpoint...")
    try:
        response = requests.get(f"{API_BASE_URL}/api/dashboard/stats", headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Dashboard endpoint OK")
        elif response.status_code == 404:
            print("‚ö†Ô∏è Dashboard endpoint ch∆∞a implement")
        else:
            print(f"‚ùå Dashboard endpoint l·ªói: {response.status_code}")
    except Exception as e:
        print(f"‚ùå L·ªói dashboard endpoint: {str(e)}")
    
    # 7. Test response time
    print("\nüîç 7. Ki·ªÉm tra th·ªùi gian ph·∫£n h·ªìi...")
    try:
        start_time = time.time()
        response = requests.get(f"{API_BASE_URL}/api/employees/", headers=headers, timeout=10)
        end_time = time.time()
        
        response_time = end_time - start_time
        print(f"‚úÖ Th·ªùi gian ph·∫£n h·ªìi: {response_time:.2f}s")
        
        if response_time > 5:
            print("‚ö†Ô∏è Th·ªùi gian ph·∫£n h·ªìi ch·∫≠m (>5s)")
        elif response_time > 2:
            print("‚ö†Ô∏è Th·ªùi gian ph·∫£n h·ªìi h∆°i ch·∫≠m (>2s)")
        else:
            print("‚úÖ Th·ªùi gian ph·∫£n h·ªìi t·ªët (<2s)")
            
    except Exception as e:
        print(f"‚ùå L·ªói test response time: {str(e)}")
    
    print("\n" + "=" * 50)
    print("üéâ HO√ÄN TH√ÄNH KI·ªÇM TRA NHANH")
    print("=" * 50)
    return True

if __name__ == "__main__":
    quick_test()

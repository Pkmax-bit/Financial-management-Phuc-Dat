"""
Script ki·ªÉm tra h√≥a ƒë∆°n cho d·ª± √°n
Gi√∫p debug t·∫°i sao kh√¥ng c√≥ h√≥a ƒë∆°n trong b√°o c√°o
"""

import os
from supabase import create_client
from dotenv import load_dotenv

load_dotenv()

# Initialize Supabase
supabase = create_client(
    os.getenv("SUPABASE_URL"),
    os.getenv("SUPABASE_KEY")
)

def check_invoices():
    print("=== KI·ªÇM TRA H√ìA ƒê∆†N ===\n")
    
    # 1. Ki·ªÉm tra t·∫•t c·∫£ projects
    projects = supabase.table("projects").select("id, name, project_code").execute()
    print(f"‚úÖ T·ªïng s·ªë d·ª± √°n: {len(projects.data)}\n")
    
    for project in projects.data:
        print(f"\nüìÇ D·ª± √°n: {project['name']} ({project['project_code']})")
        print(f"   ID: {project['id']}")
        
        # 2. Ki·ªÉm tra invoices c·ªßa d·ª± √°n
        all_invoices = supabase.table("invoices")\
            .select("id, invoice_number, status, payment_status, total_amount")\
            .eq("project_id", project['id'])\
            .execute()
        
        print(f"   üìÑ T·ªïng h√≥a ƒë∆°n: {len(all_invoices.data)}")
        
        if len(all_invoices.data) > 0:
            # Group by status
            status_count = {}
            for inv in all_invoices.data:
                status = inv['status']
                status_count[status] = status_count.get(status, 0) + 1
            
            print(f"   üìä Ph√¢n lo·∫°i theo status:")
            for status, count in status_count.items():
                print(f"      ‚Ä¢ {status}: {count} h√≥a ƒë∆°n")
            
            # Show invoices that should be counted
            valid_invoices = [inv for inv in all_invoices.data if inv['status'] in ['sent', 'paid']]
            print(f"\n   ‚úÖ H√≥a ƒë∆°n ƒë∆∞·ª£c t√≠nh (sent/paid): {len(valid_invoices)}")
            
            if len(valid_invoices) > 0:
                total = sum(inv['total_amount'] for inv in valid_invoices)
                print(f"      üí∞ T·ªïng doanh thu: {total:,.0f} VND")
                print(f"      üìã Danh s√°ch:")
                for inv in valid_invoices:
                    print(f"         - {inv['invoice_number']}: {inv['total_amount']:,.0f} VND (status: {inv['status']}, payment: {inv['payment_status']})")
            else:
                print(f"      ‚ö†Ô∏è  Kh√¥ng c√≥ h√≥a ƒë∆°n v·ªõi status 'sent' ho·∫∑c 'paid'")
                print(f"      üí° G·ª£i √Ω: Ki·ªÉm tra v√† c·∫≠p nh·∫≠t status cho h√≥a ƒë∆°n")
        
        # 3. Ki·ªÉm tra project expenses
        expenses = supabase.table("project_expenses")\
            .select("id, expense_code, amount, status")\
            .eq("project_id", project['id'])\
            .execute()
        
        print(f"\n   üí∏ T·ªïng chi ph√≠ d·ª± √°n: {len(expenses.data)}")
        
        if len(expenses.data) > 0:
            approved_expenses = [exp for exp in expenses.data if exp['status'] == 'approved']
            print(f"   ‚úÖ Chi ph√≠ ƒë√£ duy·ªát: {len(approved_expenses)}")
            
            if len(approved_expenses) > 0:
                total_cost = sum(exp['amount'] for exp in approved_expenses)
                print(f"      üí∞ T·ªïng chi ph√≠: {total_cost:,.0f} VND")
            else:
                print(f"      ‚ö†Ô∏è  Kh√¥ng c√≥ chi ph√≠ v·ªõi status 'approved'")
        
        print("\n" + "="*80)

if __name__ == "__main__":
    try:
        check_invoices()
    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")
        import traceback
        traceback.print_exc()

